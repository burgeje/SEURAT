<?xml version="1.0"?>

<!--
	File:	DRXML.xsd
	Author:	Janet Burge
	Purpose: To provide representations for the DRXML
	Last Updated: 04_14_2007
-->

<xsd:schema 
	targetNamespace="http://www.cs.wpi.edu/~jburge/DRXML/Rationale" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns="http://www.cs.wpi.edu/~jburge/DRXML/Rationale"
	elementFormDefault="qualified">

	<xsd:element name="rationale" type="Rationale"/>

	<!-- ATTRIBUTES -->
	
	<!--Pattern Library Attributes -->
	<xsd:simpleType name="PatternType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Architecture"/>
			<xsd:enumeration value="Design"/>
			<xsd:enumeration value="Idiom"/>
		</xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="patID">
		<xsd:restriction base="xsd:ID"></xsd:restriction>
	</xsd:simpleType>
	
	<xsd:simpleType name="patIDref">
		<xsd:restriction base="xsd:IDREF"></xsd:restriction>
	</xsd:simpleType>
	<!-- End of Pattern Library Attributes -->
	
	<xsd:simpleType name="id">
		<xsd:restriction base="xsd:ID"/>
	</xsd:simpleType>

	<xsd:simpleType name="ref">
		<xsd:restriction base="xsd:IDREF"/>
	</xsd:simpleType>

	<xsd:simpleType name="Direction">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="IS"/>
			<xsd:enumeration value="NOT"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="Importance">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Default"/>
			<xsd:enumeration value="Not"/>
			<xsd:enumeration value="Low"/>
			<xsd:enumeration value="Moderate"/>
			<xsd:enumeration value="High"/>
			<xsd:enumeration value="Essential"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="Plausibility">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Low"/>
			<xsd:enumeration value="Medium"/>
			<xsd:enumeration value="High"/>
			<xsd:enumeration value="Certain"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="Phase">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Requirements"/>
			<xsd:enumeration value="Analysis"/>
			<!-- Pattern's Arch -->
			<xsd:enumeration value="Architecture"/>
			<xsd:enumeration value="Design"/>
			<xsd:enumeration value="Implementation"/>
			<xsd:enumeration value="Test"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="Amount">
		<xsd:restriction base="xsd:positiveInteger">
			<xsd:maxExclusive value="11"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="ReqType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="FR"/>
			<xsd:enumeration value="NFR"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="DecisionType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="SingleChoice"/>
			<xsd:enumeration value="MultipleChoice"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- Some of the may not be used, but I keep them there just in case it is used -->

	<xsd:simpleType name="ArgType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Supports"/>
			<xsd:enumeration value="Denies"/>
			<xsd:enumeration value="Pre-supposes"/>
			<xsd:enumeration value="Pre-supposed-by"/>
			<xsd:enumeration value="Opposes"/>
			<xsd:enumeration value="Opposed"/>
			<xsd:enumeration value="Opposed-by"/>
			<xsd:enumeration value="Addresses"/>
			<xsd:enumeration value="Satisfies"/>
			<xsd:enumeration value="Violates"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- requirement status was just made up -->

	<xsd:simpleType name="ReqStatus">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Satisfied"/>
			<xsd:enumeration value="Violated"/>
			<xsd:enumeration value="Addressed"/>
			<xsd:enumeration value="Retracted"/>
			<xsd:enumeration value="Rejected"/>
			<xsd:enumeration value="Undecided"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- decision status  and alternative status taken from Bose 
	 	DecisionStatus = issue status
		AlternativeStatus = option status 
		this is probably overkill...   -->

      <!-- should I add a reason for the status? this would make it no longer a simple type...
	-->

	<xsd:simpleType name="DecisionStatus">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Resolved"/>
			<xsd:enumeration value="Unresolved"/>
			<xsd:enumeration value="Non-resolvable"/>
			<xsd:enumeration value="Addressed"/>
			<xsd:enumeration value="Retracted"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="AltStatus">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Adopted"/>
			<xsd:enumeration value="At_Issue"/>
			<xsd:enumeration value="Rejected"/>
		</xsd:restriction>
	</xsd:simpleType>


	<!-- question status -->
	
	<xsd:simpleType name="QuestionStatus">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Unanswered"/>
			<xsd:enumeration value="Answered"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- designer position -->

	<xsd:simpleType name="CompanyPosition">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="Engineer"/>
			<xsd:enumeration value="SeniorEngineer"/>
			<xsd:enumeration value="PrincipleEngineer"/>
			<xsd:enumeration value="Scientist"/>
			<xsd:enumeration value="SeniorScientist"/>
			<xsd:enumeration value="SeniorEngineer"/>
			<xsd:enumeration value="PrincipleEngineer"/>
			<xsd:enumeration value="President"/>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="ProjectPosition">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="MemberTechnicalStaff"/>
			<xsd:enumeration value="GroupLeader"/>
			<xsd:enumeration value="TestEngineer"/>
			<xsd:enumeration value="ProjectLeader"/>
			<xsd:enumeration value="PrincipleInvestigator"/>
			<xsd:enumeration value="SystemArchitect"/>
		</xsd:restriction>
	</xsd:simpleType>

	<!-- user-derived-datetype -->

	<xsd:simpleType name="Percentage">
  		<xsd:restriction base="xsd:decimal">
   			<xsd:minInclusive value="0.0"/> 
			<xsd:maxInclusive value="100.0"/>
  		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="UnsignedDecimal">
  		<xsd:restriction base="xsd:decimal">
   			<xsd:minInclusive value="0.0"/> 
  		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="Level">
  		<xsd:restriction base="xsd:short">
   			<xsd:minInclusive value="1"/> 
			<xsd:maxInclusive value="10"/>
  		</xsd:restriction>
	</xsd:simpleType>

	<!-- ELEMENTS -->

	<!-- Ref -->

	<xsd:complexType name="Ref">
		<xsd:complexContent>
			<xsd:restriction base="xsd:anyType">
				<xsd:attribute name="ref" type="ref" use="required"/>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>

      <!-- 	Rationale is made up of a series of decision problems.
		It might be useful to also divide them up by phase. Currently
		each decision has a phase associated with it. 
	-->

      <xsd:complexType name="Rationale">
		<xsd:sequence>
			<xsd:element name="argOntology" type="ArgOntology" minOccurs="1" maxOccurs="unbounded"/>
		   	<xsd:element name="requirement" type="Requirement" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="decisionproblem" type="DecisionProblem" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="tradeoff" type="Tradeoff" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="coOccurrence" type="CoOccurrence" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="designProductOntology" type="DesignProductOntology" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="designConstraint" type="DesignConstraints" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="designContingency" type="DesignContingency" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="designerProfile" type="DesignerProfile" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="patternLibrary" type="PatternLib" minOccurs="1" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

	<!-- 	Requirements - requirements can have sub-requirements and arguments. In this
		case, the sub-requirements may not be all the parts of the requirement. We need
		to decide if we want this to be a part-whole relationship like with decisions or
		not...

		Also - should requirements be related to the argument ontology?

		Issue: we will want to be able to find every part of the DR that references a 
		specific requirement but it probably isn't ideal to have the requirements knowing
		who affects them. That is something that will need some thought.
	-->

	<xsd:complexType name="Requirement">
	   <xsd:sequence>
		<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
		<xsd:element name="argument" type="Argument" minOccurs="0" maxOccurs="unbounded"/>
		<xsd:element name="history" type="StatusHistory" minOccurs="1" maxOccurs="1"/>
	   </xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string"/>
		<xsd:attribute name="reqtype" type="ReqType" use="required"/>
		<xsd:attribute name="artifact" type="xsd:string" use="required"/>
		<xsd:attribute name="status" type="ReqStatus" use="required"/>
	</xsd:complexType>

	<!-- here is an alternative way of handling status -->

	
	<xsd:complexType name="StatusHistory">
		<xsd:sequence>
			<xsd:element name="record" type="HistoryRecord" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="HistoryRecord">

			<xsd:attribute name="status" type="xsd:string" use="required"/>
			<xsd:attribute name="datestamp" type="xsd:string" use="required"/>
			<xsd:attribute name="reason" type="xsd:string" use="required"/>
	</xsd:complexType>
	<!-- 	Decision problems have both alternatives *or* sub-decisions. In this case,
		the sub-decision is an "a part of" relationship where solving the parent
		decision involves solving all the child decisions. This differentiates between
		decisions that arise because of a decision problem answer (i.e. alternative) and 
		decisions that are actually components of the parent. 

		The decision also has a phase (req, design, etc.), a status, and an attribute
		identifying what attribute it is associated with in the design. It is not clear (and
		must be decided) what the distinction is between elements in the design (artifacts) that
		require that a decision is made and elements in the design that describe the decision
		that was made (i.e. the instantiation of the alternative chosen). 

		Question: should there be arguments allowed against decision problems? 
		(the fact that one must be made, not the answer). I'm guessing no.
	-->

	<xsd:complexType name="DecisionProblem">
	   <xsd:sequence>
  		   <xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
		   <xsd:choice>
			<xsd:element name="alternative" type="Alternative" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="decisionproblem" type="DecisionProblem" minOccurs="0" maxOccurs="unbounded"/>
	   	   </xsd:choice>
		<xsd:element name="question" type="Question" minOccurs="0" maxOccurs="unbounded"/>
		<xsd:element name="history" type="StatusHistory" minOccurs="1" maxOccurs="1"/>
	  </xsd:sequence>
	  <xsd:attribute name="id" type="xsd:ID" use="required"/>
	  <xsd:attribute name="name" type="xsd:string" use="required"/>
	  <xsd:attribute name="type" type="DecisionType" use="required"/>
	  <xsd:attribute name="phase" type="Phase" use="required"/>
	  <xsd:attribute name="status" type="DecisionStatus" use="required"/>
	  <xsd:attribute name="artifact" type="xsd:string"/>
	</xsd:complexType>

 	<!-- Questions can be attached to decision problems
 	-->
 	
 	<xsd:complexType name="Question">
 		<xsd:sequence>
  			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
 			<xsd:element name="procedure" type="xsd:string" minOccurs="0" maxOccurs="1"/>
 			<xsd:element name="answer" type="xsd:string" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="history" type="StatusHistory" minOccurs="1" maxOccurs="1"/>
		</xsd:sequence>
	      <xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="status" type="QuestionStatus" use="required"/>
	</xsd:complexType>

 			
	<!-- 	Alternatives are the different choices available for answering/solving the 
		decision problem. These have a series of arguments and may also 
		result in sub-decisions that must then be made. The alternative has a status
		and also a reason for that status. It might also be useful to change this to
		a list of status entries - there should be a reason given for each time the status
		changes. We may want this to apply cross-DR.
	-->

	<xsd:complexType name="Alternative">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="argument" type="Argument" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="history" type="StatusHistory" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="question" type="Question" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="decisionproblem" type="DecisionProblem" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	      <xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="evaluation" type="xsd:float" use="required"/>
		<xsd:attribute name="status" type="AltStatus" use="required"/>
	</xsd:complexType>


	<!-- 	Arguments apply to alternatives and can be of two types - either a
		requirement (which will have an affect on the values for the argument)
		or a claim (therefore allowing reasons to prefer some arguments over
		others that have nothing to do with any formal requirements on the system).

		The argument type will indicate if this is an argument for or against the alternative. 
		It will be either supports or denies (for claims) or addresses, satisfies, or violates
		(for requirements). 

		It is also possible to have arguments to the arguments. This will be where pre-supposes
		and pre-supposed-by will come in. Supports or denies can also appear here.

		Question: should the evaluation of an alternative be stored as part of the alternative?
		This would speed computation...

		Issue: if we use pre-supposes and pre-supposed by that will make it quicker to figure out
		who is affected by who. It also means more stuff to have to update... This is 
		probably not the only place in the DR where this kind of thing is needed. 
	-->

      <xsd:complexType name="Argument">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:choice>
				<xsd:element name="reqRef" type="xsd:IDREF"/>
				<xsd:choice>
					<xsd:element name="ref" type="xsd:IDREF"/>
					<xsd:element name="claim" type="Claim"/>
					<xsd:element name="assumption" type="Assumption"/>
					<xsd:element name="requirement" type="Requirement"/>
					<xsd:element name="alternative" type="Alternative"/>
				</xsd:choice>
				<xsd:element name="altRef" type="xsd:IDREF"/>
			</xsd:choice>
			<xsd:element name="argument" type="Argument" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="question" type="Question" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
  	      <xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="argtype" type="ArgType" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="importance" type="Importance" use="optional"/>
		<xsd:attribute name="plausibility" type="Plausibility" use="required"/>
		<xsd:attribute name="amount" type="Amount" use="required"/>
	</xsd:complexType>


	<!-- 	Claims - here are reasons for and against alternatives (or requirements, or ...) that
		are not requirements. In this case, we have a pointer to an Ontology Entry that can
		be used in doing semantic inferencing.
	-->

	<xsd:complexType name="Claim">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="ref" type="xsd:IDREF"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="importance" type="Importance" use="optional"/>
		<xsd:attribute name="direction" type="Direction" use="required"/>
	</xsd:complexType>

	<!--	Assumptions - these are assumptions that must be true for some part of the rationale
		to hold. Since these can be a part of an argument, they can be arguments for/against
		other arguments or directly for or against alternatives.
	-->

	<xsd:complexType name="Assumption">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name = "id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>
	
	<!-- 	The argument ontology is a series of ontology entries. It is actually
		several trees - I didn't see any point in making a false "root node" 
		This could be changed though if necessary
	-->

	<xsd:complexType name="Tradeoff">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="ref" type="xsd:IDREF" minOccurs="2" maxOccurs="2"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="symmetric" type="xsd:boolean" use="required"/>
	</xsd:complexType>

	<xsd:complexType name="CoOccurrence">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="ref" type="xsd:IDREF" minOccurs="2" maxOccurs="2"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>

	<xsd:complexType name="designProductOntology">
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="ref" type="xsd:IDREF"/>
				<xsd:element name="ontEntry" type="OntologyEntry" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="designConstraint">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="designComponent" type="xsd:IDREF" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="amount" type="UnsignedDecimal" use="required" default="0.0"/>
		<xsd:attribute name="unit" type="xsd:string" use="optional"/>
	</xsd:complexType>

	<xsd:complexType name="designContingency">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="percentage" type="Percentage" use="required" default="0.0"/>
	</xsd:complexType>

	<xsd:complexType name="designerProfile">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="companyPosition" type="CompanyPosition" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="projectPosition" type="ProjectPosition" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="ref" type="xsd:IDREF" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="companyExperience" type="unsignedShort" use="optional" default="0"/>
		<xsd:attribute name="totalExperience" type="unsignedShort" use="optional" default="0"/>
		<xsd:attribute name="level" type="Level" use="optional"/>
	</xsd:complexType>

	<xsd:complexType name="ArgOntology">
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="ref" type="xsd:IDREF"/>
				<xsd:element name="ontEntry" type="OntologyEntry" minOccurs="0" maxOccurs="unbounded"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- Pattern Library Complex Types -->
	
	<xsd:complexType name="PatternLib">
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="pattern" type="Pattern"/>
				<xsd:element name="patternDecision" type="PatternDec"/>
				<xsd:element name="patternCategory" type="PatternProblemCategory"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="PatternProblemCategory">
		<xsd:attribute name="rid" type="patIDref" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="type" type="PatternType" use="required"/>
	</xsd:complexType>
	
	<xsd:complexType name="PatternDec">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="refChildPattern" type="patIDRef" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="rid" type="patIDref" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="type" type="DecisionType" use="required"/>
		<xsd:attribute name="phase" type="Phase" use="required"/>
		<xsd:attribute name="status" type="DecisionStatus" use="required"/>
		<!-- xsd:attribute name="artifact" type="xsd:string"/ -->
	</xsd:complexType>
	
	<xsd:complexType name="Pattern">
		<xsd:sequence>
			<!-- refChildDecision contains the id of Pattern Decisions that are child of this pattern -->
			<xsd:element name="refChildDecision" type="patIDRef" minOccurs="0" maxOccurs="unbounded"/>
			<!-- refChildOntology contains the ontology entries this pattern is using  -->
			<xsd:element name="refOntPos" type="ref" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="refOntNeg" type="ref" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="refCategory" type="patIDRef" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="type" type="PatternType" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="problem" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="context" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="solution" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="implementation" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="example" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="url" type="xsd:string" minOccurs="1" maxOccurs="1"/>
		</xsd:sequence>
		<xsd:attribute name="rid" type="patIDref" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
	</xsd:complexType>
	<!-- End of Pattern Library Complex Types -->

	<!--	Each ontology entry consists of its description and any child entries
		The ID for the ontology entry should be sufficient to explain what it is
		but the more detailed description can provide additional information
	-->

	<xsd:complexType name="Entry">
		<xsd:choice>
			<xsd:element name="ref" type="xsd:IDREF" minOccurs="0" maxOccurs="1"/>
			<xsd:element name="ontEntry" type="OntologyEntry" minOccurs="0" maxOccurs="1"/>
		</xsd:choice>
	</xsd:complexType>

	<xsd:complexType name="OntologyEntry">
		<xsd:sequence>
			<xsd:element name="description" type="xsd:string" minOccurs="1" maxOccurs="1"/>
			<xsd:element name="subEntry" type="Entry" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute name="id" type="xsd:ID" use="required"/>
		<xsd:attribute name="name" type="xsd:string" use="required"/>
		<xsd:attribute name="importance" type="Importance" use="required"/>
	</xsd:complexType>

</xsd:schema>

