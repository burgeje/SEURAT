<?xml version="1.0" encoding="UTF-8" standalone="no"?><DR:rationale xmlns:DR="http://www.cs.wpi.edu/~jburge/DRXML/Rationale" xmlns="http://www.cs.wpi.edu/~jburge/DRXML/Rationale" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.cs.wpi.edu/~jburge/DRXML/Rationale http://www.cs.wpi.edu/~jburge/DRXML/Rationale.xsd"><DR:argOntology><DR:ontEntry id="r1" importance="Moderate" name="Argument-Ontology"><DR:description/><DR:subEntry><DR:ontEntry id="r2" importance="Moderate" name="Affordability Criteria"><DR:description>These arguments refer to the cost of the software</DR:description><DR:subEntry><DR:ontEntry id="r3" importance="Moderate" name="Development Cost"><DR:description>Development cost is a big factor in affordability</DR:description><DR:subEntry><DR:ontEntry id="r4" importance="Moderate" name="Uses Standard Tools and Environments"><DR:description>Using standard tools and environments is a good way to keep costs down</DR:description><DR:subEntry><DR:ontEntry id="r5" importance="Moderate" name="{is a| uses a} standard development tool(s)"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r6" importance="Moderate" name="{is a | uses a} standard language"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r7" importance="Moderate" name="Uses Familiar Tools and Environments"><DR:description>If the developers are familiar, it is cheaper to use</DR:description><DR:subEntry><DR:ontEntry id="r8" importance="Moderate" name="{is a | uses a} familiar language"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r9" importance="Moderate" name="utilizes developer experience"><DR:description>performance is better if the developer is experienced at what they do</DR:description></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r10" importance="Moderate" name="{is a | uses a} familiar development environment"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r11" importance="Moderate" name="{is a | uses a} familiar hardware platform"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r12" importance="Moderate" name="Reduces Development Time"><DR:description>A good thing!</DR:description><DR:subEntry><DR:ontEntry id="r13" importance="Moderate" name="is component based"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r14" importance="Moderate" name="uses COTS/GOTS software"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r15" importance="Moderate" name="reduces customization"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r16" importance="Moderate" name="utilizes existing code developed in-house"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r17" importance="Moderate" name="uses automatically generated code"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r18" importance="Moderate" name="Reduces Project Sucess Risk"><DR:description>Are we in danger of not completing?</DR:description><DR:subEntry><DR:ontEntry id="r19" importance="Moderate" name="{is a | uses a} mature language"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r20" importance="Moderate" name="{is a | uses a} mature process"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r21" importance="Moderate" name="Reduces Prototyping Cost"><DR:description>Another place to look at cost</DR:description><DR:subEntry><DR:ontEntry id="r22" importance="Moderate" name="reduces prototyping time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r23" importance="Moderate" name="Reduces Risk Analysis Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r24" importance="Moderate" name="reduces risk analysis time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r25" importance="Moderate" name="Reduces Component Integration Cost"><DR:description>Integration can be a cost savings or a bust</DR:description><DR:subEntry><DR:ontEntry id="r26" importance="Moderate" name="reduces component integration time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r27" importance="Moderate" name="Reduces Domain Analysis Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r28" importance="Moderate" name="reduces domain analysis time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r29" importance="Moderate" name="Reduces Inspection Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r30" importance="Moderate" name="reduces inspection time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r31" importance="Moderate" name="Deployment Cost"><DR:description>How much does it cost to deploy the system?</DR:description><DR:subEntry><DR:ontEntry id="r32" importance="Moderate" name="Minimizes Equipment Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r33" importance="Moderate" name="reduces hardware cost"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r34" importance="Moderate" name="Minimizes External Software Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r35" importance="Moderate" name="{is | uses} open source"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r36" importance="Moderate" name="Minimizes Deployment Time"><DR:description/><DR:subEntry><DR:ontEntry id="r37" importance="Moderate" name="reduces software production time"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r38" importance="Moderate" name="reduces customer evaluation time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r39" importance="Moderate" name="Operating Cost"><DR:description>What are the operating costs?</DR:description><DR:subEntry><DR:ontEntry id="r40" importance="Moderate" name="Minimizes Communication Cost"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r41" importance="Moderate" name="Maintenance Cost"><DR:description>Cost to maintain the system once deployed</DR:description><DR:subEntry><DR:ontEntry id="r42" importance="Moderate" name="Reduces Maintenance Time"><DR:description/><DR:subEntry><DR:ontEntry id="r43" importance="Moderate" name="reduces re-compilation"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r44" importance="Moderate" name="Reduces Support Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r45" importance="Moderate" name="increases hardware support available"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r46" importance="Moderate" name="increases software support available"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r47" importance="Moderate" name="Reduces Re-engineering Cost"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r48" importance="Moderate" name="Reduces Retirement Cost"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r49" importance="Moderate" name="Upgrade Cost"><DR:description>How expensive is it to keep the system up to date?</DR:description><DR:subEntry><DR:ontEntry id="r50" importance="Moderate" name="Reduces COTS Risk"><DR:description/><DR:subEntry><DR:ontEntry id="r51" importance="Moderate" name="isolates code dependent on outside software"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r52" importance="Moderate" name="reduces vendor dependencies"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r53" importance="Moderate" name="reduces version dependencies"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r54" importance="Moderate" name="isolates version dependencies"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r55" importance="Moderate" name="Administration Cost"><DR:description>How expensive is administration?</DR:description><DR:subEntry><DR:ontEntry id="r56" importance="Moderate" name="Reduces Coordination Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r57" importance="Moderate" name="reduces coordination time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r58" importance="Moderate" name="Reduces Planning Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r59" importance="Moderate" name="reduces planning time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r60" importance="Moderate" name="Reduces Project Tracking Cost"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r61" importance="Moderate" name="Reduces Process Management Cost"><DR:description/><DR:subEntry><DR:ontEntry id="r62" importance="Moderate" name="reduces process management time"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r278" importance="Moderate" name="Testing Cost"><DR:description>How expansive it is to test the product?</DR:description><DR:subEntry><DR:ontEntry id="r279" importance="Moderate" name="Input/Output"><DR:description>Automated input/output testing can improve efficiency.</DR:description><DR:subEntry><DR:ontEntry id="r283" importance="Moderate" name="supports test stubs"><DR:description>Simulate behaviors of dependent modules to provide testing for upper-layer services.</DR:description></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r284" importance="Moderate" name="supports test drivers"><DR:description>Simulate behavior of upper-layer services before implementing them.</DR:description></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r285" importance="Moderate" name="{provides | supports} test harness"><DR:description>Using an automated testing procedure to test a program by running it with varying inputs.</DR:description></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r280" importance="Moderate" name="Monitoring"><DR:description>Additional monitors can test against NFRs</DR:description><DR:subEntry><DR:ontEntry id="r281" importance="Moderate" name="{provides | supports} internal monitoring"><DR:description>Keeps track of internal states of the components it monitors.</DR:description></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r282" importance="Moderate" name="supports external monitoring"><DR:description>Use other utilities to keep track of load of equipments, capacity, function profiles.</DR:description></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r63" importance="Moderate" name="Adaptability Criteria"><DR:description/><DR:subEntry><DR:ontEntry id="r64" importance="Moderate" name="Extensibility"><DR:description/><DR:subEntry><DR:ontEntry id="r65" importance="Moderate" name="Minimizes Modification Impact"><DR:description/><DR:subEntry><DR:ontEntry id="r66" importance="Moderate" name="isolates likely to change code"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r67" importance="Moderate" name="reduces modification impact"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r68" importance="Moderate" name="reduces change coordination"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r69" importance="Moderate" name="facilitates wrappability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r70" importance="Moderate" name="uses replaceable modules"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r71" importance="Moderate" name="Minimizes the Amount of Code to Modify"><DR:description/><DR:subEntry><DR:ontEntry id="r72" importance="Moderate" name="increases commonality"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r73" importance="Moderate" name="reduces coupling"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r74" importance="Moderate" name="increases encapsulation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r75" importance="Moderate" name="increases cohesion"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r76" importance="Moderate" name="Simplifies Modification"><DR:description/><DR:subEntry><DR:ontEntry id="r77" importance="Moderate" name="uses a design pattern"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r78" importance="Moderate" name="reduces duplication"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r79" importance="Moderate" name="provides modularity"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r80" importance="Moderate" name="provides information hiding"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r81" importance="Moderate" name="Modifiability"><DR:description/><DR:subEntry><DR:ontEntry id="r82" importance="Moderate" name="Increases Flexibility"><DR:description/><DR:subEntry><DR:ontEntry id="r83" importance="Moderate" name="{provides | supports} reflection"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r84" importance="Moderate" name="provides tunable parameters"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r85" importance="Moderate" name="Adaptability"><DR:description/><DR:subEntry><DR:ontEntry id="r86" importance="Moderate" name="Increases Additivity"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r87" importance="Moderate" name="Increases Elasticity"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r88" importance="Moderate" name="Increases"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r89" importance="Moderate" name="Portability"><DR:description/><DR:subEntry><DR:ontEntry id="r90" importance="Moderate" name="Reduces Hardware Dependencies"><DR:description/><DR:subEntry><DR:ontEntry id="r91" importance="Moderate" name="isolates hardware dependent code"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r92" importance="Moderate" name="Reduces Software Dependencies"><DR:description/><DR:subEntry><DR:ontEntry id="r93" importance="Moderate" name="{avoids | reduces} OS dependencies"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r94" importance="Moderate" name="Scalability"><DR:description/><DR:subEntry><DR:ontEntry id="r95" importance="Moderate" name="Increases Scalability"><DR:description/><DR:subEntry><DR:ontEntry id="r96" importance="Moderate" name="{allows | supports} additional users"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r97" importance="Moderate" name="{provides | supports} policy/mechanism separation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r98" importance="Moderate" name="adapts to increase in intensity of use"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r99" importance="Moderate" name="minimizes connections to be set up"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r100" importance="Moderate" name="supports functionality reuse"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r101" importance="Moderate" name="avoids fixed data sizes"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r102" importance="Moderate" name="Reusability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r103" importance="Moderate" name="Interoperability"><DR:description/><DR:subEntry><DR:ontEntry id="r104" importance="Moderate" name="Provides Interface Standardization"><DR:description/><DR:subEntry><DR:ontEntry id="r105" importance="Moderate" name="{is a | uses a} defined interface"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r106" importance="Moderate" name="{is a | uses a} standard interface"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r107" importance="Moderate" name="conforms to an API"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r108" importance="Moderate" name="{provides | supports}  consistent interfaces"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r109" importance="Moderate" name="{is a | conforms to a} standard protocol"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r110" importance="Moderate" name="Supports Easier Integration"><DR:description/><DR:subEntry><DR:ontEntry id="r111" importance="Moderate" name="exposes the API"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r112" importance="Moderate" name="reduces shared data"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r113" importance="Moderate" name="provides compatability"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r114" importance="Moderate" name="Dependability Criteria"><DR:description/><DR:subEntry><DR:ontEntry id="r115" importance="Moderate" name="Security"><DR:description/><DR:subEntry><DR:ontEntry id="r116" importance="Moderate" name="Provides Access Control"><DR:description/><DR:subEntry><DR:ontEntry id="r117" importance="Moderate" name="require authorization"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r118" importance="Moderate" name="{provides | supports} multiple authorization/access levels"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r119" importance="Moderate" name="{provides | supports} mandatory access controls"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r120" importance="Moderate" name="{provides | supports} discretionary access controls"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r121" importance="Moderate" name="Increases Data Security"><DR:description/><DR:subEntry><DR:ontEntry id="r122" importance="Moderate" name="{provides | supports} data encryption"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r123" importance="Moderate" name="{provides | supports} network isolation"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r124" importance="Moderate" name="Responds to Threats"><DR:description/><DR:subEntry><DR:ontEntry id="r125" importance="Moderate" name="{provides | supports} countermeasures"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r126" importance="Moderate" name="prevents denial of service"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r127" importance="Moderate" name="{provides | supports} threat detection"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r128" importance="Moderate" name="{provides | supports} threat prevention"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r129" importance="Moderate" name="{provides | supports} threat recovery"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r130" importance="Moderate" name="Robustness"><DR:description/><DR:subEntry><DR:ontEntry id="r131" importance="Moderate" name="Responds to User Error"><DR:description/><DR:subEntry><DR:ontEntry id="r132" importance="Moderate" name="prevents user error"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r133" importance="Moderate" name="minimizes user error"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r134" importance="Moderate" name="detects user error"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r135" importance="Moderate" name="recovers from user error"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r136" importance="Moderate" name="requests action confirmation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r137" importance="Moderate" name="requires action confirmation"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r138" importance="Moderate" name="Fault Tolerance"><DR:description/><DR:subEntry><DR:ontEntry id="r139" importance="Moderate" name="Handles Faults"><DR:description/><DR:subEntry><DR:ontEntry id="r140" importance="Moderate" name="{provides | supports} graceful degredation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r141" importance="Moderate" name="{provides | supports} replication"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r142" importance="Moderate" name="{provides | supports} failover"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r143" importance="Moderate" name="{provides | supports} fault masking"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r144" importance="Moderate" name="{provides | supports} retry when failure"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r145" importance="Moderate" name="{provides | supports} restart when failure"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r146" importance="Moderate" name="{provides | supports} reconfigure when failure"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r147" importance="Moderate" name="{provides | supports} failure repair"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r148" importance="Moderate" name="provides recovery blocks"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r149" importance="Moderate" name="Tolerates Threats"><DR:description/><DR:subEntry><DR:ontEntry id="r150" importance="Moderate" name="{provides | supports} data recoverability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r151" importance="Moderate" name="{provides | supports} state recoverability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r152" importance="Moderate" name="{provides | supports} fault detection"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r153" importance="Moderate" name="{provides | supports }fault confinement"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r154" importance="Moderate" name="Reliability"><DR:description/><DR:subEntry><DR:ontEntry id="r155" importance="Moderate" name="Prevents Data Loss"><DR:description/><DR:subEntry><DR:ontEntry id="r156" importance="Moderate" name="{is a | supports a} reliable protocol"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r157" importance="Moderate" name="prevents data overwrites"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r158" importance="Moderate" name="Safety"><DR:description/><DR:subEntry><DR:ontEntry id="r159" importance="Moderate" name="Increases Maturity"><DR:description/><DR:subEntry><DR:ontEntry id="r160" importance="Moderate" name="{is an | uses an} evaluated technology"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r161" importance="Moderate" name="Increases Predictability"><DR:description/><DR:subEntry><DR:ontEntry id="r162" importance="Moderate" name="provides stability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r163" importance="Moderate" name="provides a contract"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r164" importance="Moderate" name="Availability"><DR:description/><DR:subEntry><DR:ontEntry id="r165" importance="Moderate" name="Reduces Error Rates"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r166" importance="Moderate" name="End User Criteria"><DR:description/><DR:subEntry><DR:ontEntry id="r167" importance="Moderate" name="Usability"><DR:description/><DR:subEntry><DR:ontEntry id="r168" importance="Moderate" name="Increases Physical Ease of Use"><DR:description/><DR:subEntry><DR:ontEntry id="r169" importance="Moderate" name="{provides | supports} effective use of screen real-estate"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r170" importance="Moderate" name="minimizes keystrokes"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r171" importance="Moderate" name="{provides | supports} increased visual contrast"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r172" importance="Moderate" name="is easy to read"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r173" importance="Moderate" name="Increases Cognitive Ease of Use"><DR:description/><DR:subEntry><DR:ontEntry id="r174" importance="Moderate" name="provides reasonable default values"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r175" importance="Moderate" name="provides user guidance"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r176" importance="Moderate" name="{encourages | supports} direct manipulation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r177" importance="Moderate" name="minimizes memory load on user"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r178" importance="Moderate" name="provides feedback"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r179" importance="Moderate" name="{conforms to | utilizes} user experience"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r180" importance="Moderate" name="increases visibility of function to users"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r181" importance="Moderate" name="uses predictable sequences"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r182" importance="Moderate" name="intuitiveness"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r183" importance="Moderate" name="{provides a | supports a} appropriate metaphor"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r184" importance="Moderate" name="Increases Interface Consistency"><DR:description/><DR:subEntry><DR:ontEntry id="r185" importance="Moderate" name="{provides | supports} data entry consistency"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r186" importance="Moderate" name="{provides | supports} data display consistency"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r187" importance="Moderate" name="{provides | supports} color and style consistency"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r188" importance="Moderate" name="Increases Recoverability"><DR:description/><DR:subEntry><DR:ontEntry id="r189" importance="Moderate" name="supports undo of user actions"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r190" importance="Moderate" name="corrects user errors"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r132" importance="Moderate" name="prevents user error"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r191" importance="Moderate" name="Increases Learnability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r192" importance="Moderate" name="Increases Acceptability"><DR:description/><DR:subEntry><DR:ontEntry id="r193" importance="Moderate" name="increases aesthetic value"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r194" importance="Moderate" name="avoides offensiveness"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r195" importance="Moderate" name="Provides User Customization"><DR:description/><DR:subEntry><DR:ontEntry id="r196" importance="Moderate" name="{provides | supports} customization"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r197" importance="Moderate" name="supports different levels of user expertise"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r198" importance="Moderate" name="Supports Internationalization"><DR:description/><DR:subEntry><DR:ontEntry id="r199" importance="Moderate" name="reduces cultural dependencies"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r200" importance="Moderate" name="Increases Accessibility"><DR:description/><DR:subEntry><DR:ontEntry id="r201" importance="Moderate" name="visual accessibility"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r202" importance="Moderate" name="auditory accessibility"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r203" importance="Moderate" name="mobility accessibility"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r204" importance="Moderate" name="cogntivie accessibility"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r205" importance="Moderate" name="Integrity"><DR:description/><DR:subEntry><DR:ontEntry id="r206" importance="Moderate" name="Increases Completeness"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r207" importance="Moderate" name="Increases Consistency"><DR:description/><DR:subEntry><DR:ontEntry id="r208" importance="Moderate" name="{provides | supports} internal consistency"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r209" importance="Moderate" name="{provides | supports} external consistency"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r210" importance="Moderate" name="Increases Accuracy"><DR:description/><DR:subEntry><DR:ontEntry id="r211" importance="Moderate" name="{provides | supports} exception handling"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r212" importance="Moderate" name="supports resource assignment"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r213" importance="Moderate" name="provides validation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r214" importance="Moderate" name="provides justification enforcement"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r215" importance="Moderate" name="provides verification"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r216" importance="Moderate" name="{supports | provides} a checkpoint"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r217" importance="Moderate" name="{supports | provides} better information flow"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r218" importance="Moderate" name="{supports | provides} authentication enforcement"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r219" importance="Moderate" name="{supports | provides} auditing"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r220" importance="Moderate" name="{supports | provides} consistency checking"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r221" importance="Moderate" name="requests confirmation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r222" importance="Moderate" name="performs cross examination"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r223" importance="Moderate" name="provides tracking assistance"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r224" importance="Moderate" name="provides certification"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r225" importance="Moderate" name="requests authorization"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r226" importance="Moderate" name="provides precision"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r227" importance="Moderate" name="Needs Satisfaction Criteria"><DR:description/><DR:subEntry><DR:ontEntry id="r228" importance="Moderate" name="Verifiability"><DR:description/><DR:subEntry><DR:ontEntry id="r229" importance="Moderate" name="Increases Testability"><DR:description/><DR:subEntry><DR:ontEntry id="r230" importance="Moderate" name="increases visibility of function to be evaluated"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r231" importance="Moderate" name="supports instrumentation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r232" importance="Moderate" name="provides re-entry points"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r233" importance="Moderate" name="provides triggers"><DR:description>Triggers are set up to detect when data has changed.</DR:description></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r234" importance="Moderate" name="minimizes variable reuse"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r235" importance="Moderate" name="supports internal information capture"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r236" importance="Moderate" name="facilitates repeatability"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r237" importance="Moderate" name="Increases Auditability"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r238" importance="Moderate" name="Maintainability Criteria"><DR:description/><DR:subEntry><DR:ontEntry id="r239" importance="Moderate" name="Readability"><DR:description/><DR:subEntry><DR:ontEntry id="r240" importance="Moderate" name="Increases Code Understandability"><DR:description/><DR:subEntry><DR:ontEntry id="r241" importance="Moderate" name="provides good documentation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r242" importance="Moderate" name="{provides  | supports} code consistency"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r243" importance="Moderate" name="{provides | supports} consistent method naming"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r244" importance="Moderate" name="{provides | supports} code readability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r245" importance="Moderate" name="{provides | supports} decomposability"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r246" importance="Moderate" name="Supportability"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r247" importance="Moderate" name="Traceability"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r248" importance="Moderate" name="Performance Criteria"><DR:description/><DR:subEntry><DR:ontEntry id="r249" importance="Moderate" name="Response Time and Throughput"><DR:description/><DR:subEntry><DR:ontEntry id="r250" importance="Moderate" name="Increases Speed"><DR:description/><DR:subEntry><DR:ontEntry id="r251" importance="Moderate" name="{provides | supports} distribution"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r252" importance="Moderate" name="{provides | supports} parallelism"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r253" importance="Moderate" name="{provides | supports} congestion control"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r254" importance="Moderate" name="{provides | supports} efficient resource scheduling"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r255" importance="Moderate" name="{provides | supports} caching"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r256" importance="Moderate" name="{provides | supports} load shedding"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r257" importance="Moderate" name="{provides | supports} multi-threading"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r258" importance="Moderate" name="{is a | uses a} fast language"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r259" importance="Moderate" name="{is a | uses a} efficient algorithm"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r260" importance="Moderate" name="Optimizes Resource Use"><DR:description/><DR:subEntry><DR:ontEntry id="r261" importance="Moderate" name="{provides | supports} increased component capacity"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r262" importance="Moderate" name="reduces component load"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r263" importance="Moderate" name="minimizes bandwidth"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r264" importance="Moderate" name="minimizes persistent storage"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r265" importance="Moderate" name="{provides | supports} bandwidth change adaptation"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r266" importance="Moderate" name="Minimizes Resource Conflicts"><DR:description/><DR:subEntry><DR:ontEntry id="r267" importance="Moderate" name="avoids deadlock"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r268" importance="Moderate" name="avoids starvation"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r269" importance="Moderate" name="minimizes contention"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r270" importance="Moderate" name="Reduces Latency"><DR:description/><DR:subEntry><DR:ontEntry id="r271" importance="Moderate" name="{provides | supports} increased processing speed"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r272" importance="Moderate" name="decreases latency/perceived delay"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r273" importance="Moderate" name="Memory Efficiency"><DR:description/><DR:subEntry><DR:ontEntry id="r274" importance="Moderate" name="Minimizes Memory Use"><DR:description/><DR:subEntry><DR:ontEntry id="r275" importance="Moderate" name="avoids paging"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r276" importance="Moderate" name="prevenst memory leaks"><DR:description/></DR:ontEntry></DR:subEntry><DR:subEntry><DR:ontEntry id="r277" importance="Moderate" name="minimizes secondary storage use"><DR:description/></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:subEntry></DR:ontEntry></DR:argOntology><DR:patternLibrary><DR:patternCategory name="From_Mud_To_Structure" rid="c1" type="Architecture"/><DR:patternCategory name="Distributed_Systems" rid="c2" type="Architecture"/><DR:patternCategory name="Interactive_Systems" rid="c3" type="Architecture"/><DR:patternCategory name="Adaptable_Systems" rid="c4" type="Architecture"/><DR:patternCategory name="Structural_Decomposition" rid="c5" type="Design"/><DR:patternCategory name="Organization_Of_Work" rid="c6" type="Design"/><DR:patternCategory name="Access_Control" rid="c7" type="Design"/><DR:patternCategory name="Management" rid="c8" type="Design"/><DR:patternCategory name="Communication" rid="c9" type="Design"/><DR:patternCategory name="Other_Architecture_Problem" rid="c10" type="Architecture"/><DR:patternCategory name="Other_Design_Problem" rid="c11" type="Design"/><DR:patternCategory name="Idiom" rid="c12" type="Idiom"/><DR:pattern name="Three-layer" rid="p1"><type>Architecture</type><description>The system is organized into three primary layers: Presentation, Domain, and Data Source.</description><problem>In a system in which abstract domains must be implemented in terms of more concrete (less abstract) domains, we need a simple organizational pattern. Additionally, in many systems we need portability of the application to other platforms, or we want to provide an abstract platform or execution environment for which applications may be easily adapted.</problem><context>Development of a large business application, where many users share common data and operations on them. In addition, there might be legacy systems which have to be integrated in the new application.</context><solution>'Base your layered architecture on three layers: Presentation, Domain, and Data Source.  Presentation layer is about how to handle the interaction between the user and the software. This can be as simple as a command-line or text-based menu system, but these days it� more likely to be a rich-client graphics UI or an HTML-based browser UI. Data source layer is about communicating with other systems that carry out tasks on behalf of the application. These can be transaction monitors, other applications, messaging systems, and so forth. Domain logic, also referred to as business logic. This is the work that this application needs to do for the domain you�e working with. It involves calculations based on inputs and stored data, validation of any data that comes in from the presentation, and figuring out exactly what data source logic to dispatch, depending on commands received from the presentation.</solution><implementation/><example>The three-layer architecture offers significant advantages even for relatively small applications. For instance, the single-user PC application First Account from the Norwegiancompany Economica encapsulates most of the accounting and invoicing functionality in adynamic link library (DLL), which in turn works against a local, flat-file database. This separationenabled the developers with knowledge of accounting and object-oriented design to dedicatethemselves to the central functionality, and user interface designers with little or no knowledge ofprogramming to fully control their part of the application.</example><url>http://msdn.microsoft.com/en-us/library/ms978689.aspx</url><refCategory>c1</refCategory><refOntPos>r93</refOntPos><refOntPos>r100</refOntPos><refOntPos>r80</refOntPos><refOntPos>r62</refOntPos><refOntPos>r63</refOntPos><refOntPos>r87</refOntPos><refOntPos>r83</refOntPos><refOntPos>r235</refOntPos><refOntPos>r274</refOntPos><refOntNeg>r275</refOntNeg><refChildDecision>pd1</refChildDecision><refChildDecision>pd2</refChildDecision><refChildDecision>pd3</refChildDecision></DR:pattern><DR:pattern name="Layers" rid="p2"><type>Architecture</type><description>The Layers architectural pattern helps to structure applications that can be decomposed into groups of subtasks in which each group of subtasks is at a particular level of abstraction.</description><problem>In a system in which abstract domains must be implemented in terms of more concrete (less abstract) domains, we need a simple organizational pattern. Additionally, in many systems we need portability of the application to other platforms, or we want to provide an abstract platform or execution environment for which applications may be easily adapted.</problem><context>You are designing a Layered Application. You want to expose some of the core functionality of your application as services that other applications can consume, and you want your application to consume services exposed by other applications.</context><solution/><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Layers/</url><refCategory>c1</refCategory><refOntPos>r100</refOntPos><refOntPos>r80</refOntPos><refOntPos>r62</refOntPos><refOntPos>r63</refOntPos><refOntPos>r235</refOntPos><refOntPos>r87</refOntPos><refOntPos>r274</refOntPos><refOntNeg>r275</refOntNeg><refChildDecision>pd4</refChildDecision><refChildDecision>pd5</refChildDecision><refChildDecision>pd6</refChildDecision><refChildDecision>pd7</refChildDecision><refChildDecision>pd8</refChildDecision></DR:pattern><DR:pattern name="Pipes and Filters" rid="p3"><type>Architecture</type><description>The Pipes and Filters architectural pattern provides a structure for systems that process a stream of data. Each processing step is encapsulated in a filter component. Data is passed through pipes between adjacent filters. Recombining filters allows you to build families of related systems.</description><problem/><context/><solution/><implementation/><example/><url>http://msdn.microsoft.com/en-us/library/ms978599.aspx</url><refCategory>c1</refCategory><refOntPos>r80</refOntPos><refOntPos>r100</refOntPos><refOntPos>r62</refOntPos><refOntPos>r83</refOntPos><refOntPos>r21</refOntPos><refOntNeg>r246</refOntNeg><refOntNeg>r38</refOntNeg><refChildDecision>pd9</refChildDecision><refChildDecision>pd10</refChildDecision><refChildDecision>pd11</refChildDecision><refChildDecision>pd12</refChildDecision><refChildDecision>pd13</refChildDecision></DR:pattern><DR:pattern name="Blackboard" rid="p4"><type>Architecture</type><description>The Blackboard architectural pattern is useful for problems for which no deterministic solution strategies are known. In Blackboard several specialized subsystem assemble their knowledge to build a possibly partial or approximate solution.</description><problem/><context/><solution/><implementation/><example/><url>http://www.vico.org/pages/PatronsDisseny/Pattern%20Blackboard/</url><refCategory>c1</refCategory><refOntPos>r79</refOntPos><refOntPos>r83</refOntPos><refOntPos>r100</refOntPos><refOntPos>r136</refOntPos><refOntPos>r128</refOntPos><refOntNeg>r226</refOntNeg><refOntNeg>r3</refOntNeg><refOntNeg>r275</refOntNeg></DR:pattern><DR:pattern name="Model-View-Controller" rid="p5"><type>Architecture</type><description>The MVC architectural pattern divides an interactive application into three components. The model contains the core functionality and data. Views display information to the user. Controllers handle user input. Views and Controllers together comprise the user interface. A change-propagation mechanism ensures consistency between the user interface and the model.</description><problem/><context/><solution/><implementation/><example/><url>http://msdn.microsoft.com/en-us/library/ms978748.aspx</url><refCategory>c3</refCategory><refOntPos>r83</refOntPos><refOntPos>r62</refOntPos><refOntNeg>r80</refOntNeg><refChildDecision>pd16</refChildDecision><refChildDecision>pd17</refChildDecision><refChildDecision>pd18</refChildDecision><refChildDecision>pd19</refChildDecision><refChildDecision>pd20</refChildDecision><refChildDecision>pd21</refChildDecision><refChildDecision>pd22</refChildDecision><refChildDecision>pd23</refChildDecision><refChildDecision>pd24</refChildDecision></DR:pattern><DR:pattern name="Broker" rid="p6"><type>Architecture</type><description>The Broker architectural pattern can be used to structure distributed software systems with decoupled components that interact by remote service invocations. A broker component is responsible for coordinating communication, such as forwarding requests, as well as for transmitting results and exceptions.</description><problem/><context/><solution/><implementation/><example/><url>http://msdn.microsoft.com/en-us/library/ms978706.aspx</url><refCategory>c2</refCategory><refOntPos>r87</refOntPos><refOntPos>r79</refOntPos><refOntPos>r62</refOntPos><refOntPos>r101</refOntPos><refOntPos>r100</refOntPos><refOntPos>r146</refOntPos><refOntNeg>r245</refOntNeg><refOntNeg>r136</refOntNeg></DR:pattern><DR:pattern name="Presentation-Abstraction-Control" rid="p7"><type>Architecture</type><description>The Presentation-Abstraction-Control architectural pattern (PAC) defines a structure for interactive software systems in the form of a hierarchy of cooperating agents. Every agent is responsible for a specific aspect of the applications functionality and consists of three components: presentation, abstraction, and control. This subdivision separates the human-computer interaction aspects of the agent from its functional core and its communication with other agents.</description><problem/><context/><solution/><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Presentation%20Abstra/</url><refCategory>c3</refCategory><refOntPos>r92</refOntPos><refOntPos>r79</refOntPos><refOntPos>r62</refOntPos><refOntPos>r253</refOntPos><refOntNeg>r235</refOntNeg><refOntNeg>r245</refOntNeg><refChildDecision>pd25</refChildDecision><refChildDecision>pd26</refChildDecision><refChildDecision>pd27</refChildDecision><refChildDecision>pd28</refChildDecision><refChildDecision>pd29</refChildDecision><refChildDecision>pd30</refChildDecision><refChildDecision>pd31</refChildDecision><refChildDecision>pd32</refChildDecision></DR:pattern><DR:pattern name="Microkernel" rid="p8"><type>Architecture</type><description>The Microkernel architectural pattern applies to software systems that must be able to adapt to changing system requirements. It separates a minimal functional core from extended functionality and customer-specific parts. The microkernel also serves as a socket for plugging in these extensions and coordinating their collaboration.</description><problem/><context/><solution/><implementation/><example/><url>http://www.vico.org/pages/PatronsDisseny/Pattern%20MicroKernel/</url><refCategory>c4</refCategory><refOntPos>r87</refOntPos><refOntPos>r80</refOntPos><refOntPos>r62</refOntPos><refOntPos>r92</refOntPos><refOntPos>r152</refOntPos><refOntNeg>r245</refOntNeg><refOntNeg>r3</refOntNeg></DR:pattern><DR:pattern name="Reflection" rid="p9"><type>Architecture</type><description>The Reflection architectural pattern provides a mechanism for changing structure and behavior of software systems dynamically. It supports the modification of fundamental aspects, such as type structures and function call mechanisms. In this pattern, an application is split into two parts. A meta level provides information about selected system properties and makes the software self-aware. A base level includes the application logic. Its implementation builds on the meta level. Changes to information kept in the meta level affect subsequent base-level behavior.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Reflection/</url><refCategory>c4</refCategory><refOntPos>r79</refOntPos><refOntPos>r62</refOntPos><refOntNeg>r245</refOntNeg><refOntNeg>r243</refOntNeg></DR:pattern><DR:pattern name="Whole-Part" rid="p10"><type>Design</type><description>The Whole-Part design pattern helps with the aggregation of components that together form a semantic unit. An aggregate component, the Whole, encapsulates its constituent components, the Parts, organizes their collaboration, and provides a common interface to its functionality. Direct access to the Parts is not possible.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://www.vico.org/pages/PatronsDisseny/Pattern%20Whole%20Part/index.html</url><refCategory>c5</refCategory><refOntPos>r79</refOntPos><refOntPos>r100</refOntPos><refOntNeg>r245</refOntNeg></DR:pattern><DR:pattern name="Master-Slave" rid="p11"><type>Design</type><description>The Master-Slave design pattern supports fault tolerance, parallel computation and computational accuracy. A master component distributes work to identical slave components and computes a final result from the results these slaves return.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://www.vico.org/pages/PatronsDisseny/Pattern%20Master%20Slave/</url><refCategory>c6</refCategory><refOntPos>r245</refOntPos><refOntPos>r62</refOntPos><refOntNeg>r3</refOntNeg><refOntNeg>r87</refOntNeg></DR:pattern><DR:pattern name="Proxy" rid="p12"><type>Design</type><description>Provide a surrogate or placeholder for another object to control access to it.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://www.vico.org/pages/PatronsDisseny/Pattern%20Broker/</url><refCategory>c7</refCategory><refOntPos>r275</refOntPos><refOntPos>r277</refOntPos><refOntNeg>r246</refOntNeg></DR:pattern><DR:pattern name="Command Processor" rid="p13"><type>Design</type><description>The Command Processor design pattern separates the request for a service from its execution. A command processor component manages requests as separate objects, schedules their execution, and provides additional services such as the storing of request objects for later undo.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://www.vico.org/pages/PatronsDisseny/Pattern%20Command%20Processor/index.html</url><refCategory>c8</refCategory><refOntPos>r80</refOntPos><refOntPos>r213</refOntPos><refOntNeg>r275</refOntNeg></DR:pattern><DR:pattern name="View Handler" rid="p14"><type>Design</type><description>The View Handler design pattern helps to manage all views that a software system provides. A view handler component allows clients to open, manipulate and dispose of views. It also coordinates dependencies between view and organizes their update.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20View%20Handler/</url><refCategory>c8</refCategory><refOntPos>r62</refOntPos><refOntPos>r79</refOntPos><refOntNeg>r275</refOntNeg></DR:pattern><DR:pattern name="Forward-Receiver" rid="p15"><type>Design</type><description>The Forwarder-Receiver design pattern provides transparent interprocess communication for software systems with a peer-to-peer interaction model. It introduces forwarders and receivers to decouple peers from the underlying communication mechanisms.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Forward-Receiver/</url><refCategory>c9</refCategory><refOntPos>r275</refOntPos><refOntNeg>r274</refOntNeg></DR:pattern><DR:pattern name="Client-Dispatcher-Server" rid="p16"><type>Design</type><description>The Client-Dispatcher-Server design pattern introduces an intermediate layer between clients and servers, the dispatcher component. It provides location transparency by means of a name service, and hides the details of the establishment of the communication connection between clients and servers.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20ClientDispatcherServer/</url><refCategory>c9</refCategory><refOntPos>r274</refOntPos><refOntPos>r87</refOntPos><refOntPos>r83</refOntPos><refOntPos>r136</refOntPos><refOntNeg>r275</refOntNeg><refOntNeg>r79</refOntNeg></DR:pattern><DR:pattern name="Publisher-Subscriber" rid="p17"><type>Design</type><description>The Publisher-Subscriber design pattern helps to keep the state of cooperating components synchronized. To achieve this it enables one-way propagation of changes: one publisher notifies any number of subscribers about changes to its state.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Publisher%20Subscriber/</url><refCategory>c9</refCategory></DR:pattern><DR:pattern name="Strategy" rid="p18"><type>Design</type><description>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Strategy/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Factory" rid="p19"><type>Design</type><description>Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Factory%20Method/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Decorator" rid="p20"><type>Design</type><description>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Decorator/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Composite" rid="p21"><type>Design</type><description>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Composite/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Template Method" rid="p22"><type>Design</type><description>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithms structure.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Template%20Method/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Command" rid="p23"><type>Design</type><description>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Command/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Chain of Responsibility" rid="p24"><type>Design</type><description>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Chain%20of%20Responsability/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Facade" rid="p25"><type>Design</type><description>Provide a unified interface to a set of interfaces in a subsystem. Fa?ade defines a higher-level interface that makes the subsystem easier to user.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Facade/</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Transaction Script" rid="p26"><type>Design</type><description>Organizes business logic by procedures where each procedure handles a single request from the presentation.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory><refOntPos>r3</refOntPos><refOntPos>r241</refOntPos><refOntNeg>r79</refOntNeg></DR:pattern><DR:pattern name="Domain Model" rid="p27"><type>Design</type><description>An object model of the domain that incorporates both behavior and data.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory><refOntPos>r83</refOntPos><refOntPos>r80</refOntPos></DR:pattern><DR:pattern name="Table Module" rid="p28"><type>Design</type><description>A single instance that handles the business logic for all rows in a database table or view.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Gateway" rid="p29"><type>Design</type><description>An object that encapsulates access to an external system or resource.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Row Data Gateway" rid="p30"><type>Design</type><description>An object that acts as a Gateway to a single record in a data source. There is one instance per row.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Active Record" rid="p31"><type>Design</type><description>An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data.</description><problem/><context/><solution/><implementation>The essence of an Active Record is a Domain Model in which the classes match very closely the record structure of an underlying database. Each Active Record is responsible for saving and loading to the database and also for any domain logic that acts on the data. This may be all the domain logic in the application, or you may find that some domain logic is held in Transaction Scripts with common and data-oriented code in the Active Record.</implementation><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Table Data Gateway" rid="p32"><type>Design</type><description>An object that acts as a Gateway to a database table. One instance handles all the rows in the table.</description><problem/><context/><solution/><implementation>A Row Data Gateway acts as an object that exactly mimics a single record, such as one database row. In it each column in the database becomes one field. The Row Data Gateway will usually do any type conversion from the data source types to the in-memory types, but this conversion is pretty simple. This pattern holds the data about a row so that a client can then access the Row</implementation><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Application Controller" rid="p33"><type>Design</type><description>A centralized point for handling screen navigation and the flow of an application.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Transform View" rid="p34"><type>Design</type><description>A view that processes domain data element by element and transforms it into HTML.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Template View" rid="p35"><type>Design</type><description>Renders information into HTML by embedding markers in an HTML page.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Two Step View" rid="p36"><type>Design</type><description>Turns domain data into HTML in two steps: first by forming some kind of logical page, then rendering the logical page into HTML.</description><problem/><context/><solution>'</solution><implementation/><example/><url>EAA Book Online</url><refCategory>c11</refCategory></DR:pattern><DR:pattern name="Bridge" rid="p37"><type>Design</type><description>Decouple an abstraction from its implementation so that the two can vary independently.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Bridge/</url><refCategory>c12</refCategory></DR:pattern><DR:pattern name="Data Mappter" rid="p38"><type>Design</type><description>A layer of Mappers that moves data between objects and a database while keeping them independent of each other and the mapper itself.</description><problem/><context>Objects and relational databases have different mechanisms for structuring data. Many parts of an object, such as collections and inheritance, aren�t present in relational databases. When you build an object model with a lot of business logic it�s valuable to use these mechanisms to better organize the data and the behavior that goes with it.  Doing so leads to variant schemas; that is, the object schema and the relational schema don�t match up.</context><solution>The Data Mapper is a layer of software that separates the in-memory objects from the database. Its responsibility is to transfer data between the two and also to isolate them from each other. With Data Mapper the in-memory objects needn�t know even that there�s a database present; they need no SQL interface code, and certainly no knowledge of the database schema. (The database schema is always ignorant of the objects that use it.) Since it�s a form of Mapper, Data Mapper itself is even unknown to the domain layer.</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Bridge/</url><refCategory>c12</refCategory></DR:pattern><DR:pattern name="Counted Pointer" rid="p39"><type>Idiom</type><description>This idiom makes memory management of dynamically-allocated shared objects in C++ easier. It introduces a reference counter to a body class that is updated by handle objects. Clients access body class objects only through handles via the overloaded operator -&gt;()..</description><problem/><context/><solution>'</solution><implementation/><example/><url>Book Reference</url><refCategory>c12</refCategory></DR:pattern><DR:pattern name="Singleton" rid="p40"><type>Idiom</type><description>Ensure a class only has one instance, and provide a global point of access to it.</description><problem/><context/><solution>'</solution><implementation/><example/><url>http://vico.org/pages/PatronsDisseny/Pattern%20Singleton/</url><refCategory>c12</refCategory></DR:pattern><DR:pattern name="Indented Control Flow" rid="p41"><type>Idiom</type><description/><problem/><context/><solution>'</solution><implementation/><example/><url>Book Reference</url><refCategory>c12</refCategory></DR:pattern><DR:patternDecision name="What is the structure of Business Logic Layer" phase="Architecture" rid="pd1" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p26</refChildPattern><refChildPattern>p27</refChildPattern><refChildPattern>p28</refChildPattern></DR:patternDecision><DR:patternDecision name="What is the structure of Data Source Layer" phase="Architecture" rid="pd2" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p30</refChildPattern><refChildPattern>p31</refChildPattern><refChildPattern>p32</refChildPattern><refChildPattern>p37</refChildPattern></DR:patternDecision><DR:patternDecision name="What is the structure of Presentation Layer" phase="Architecture" rid="pd3" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p33</refChildPattern><refChildPattern>p34</refChildPattern><refChildPattern>p35</refChildPattern><refChildPattern>p36</refChildPattern></DR:patternDecision><DR:patternDecision name="What is the number of abstraction levels/layers?" phase="Architecture" rid="pd4" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What are the names of the layers and their tasks?(Create sub decisions for each layer))" phase="Architecture" rid="pd5" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What are the interfaces for each layer? (Create sub decisions)" phase="Architecture" rid="pd6" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p25</refChildPattern></DR:patternDecision><DR:patternDecision name="How do the layers structure together?" phase="Architecture" rid="pd7" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p18</refChildPattern><refChildPattern>p37</refChildPattern></DR:patternDecision><DR:patternDecision name="How do the layers commnucate to each other?" phase="Architecture" rid="pd8" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the error-handling strategy?" phase="Architecture" rid="pd9" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the sequence of processing tasks?" phase="Architecture" rid="pd10" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What are the data formats to be passed along each pipe?" phase="Architecture" rid="pd11" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to implement the filters? (create sub decisions for each filter)" phase="Architecture" rid="pd12" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to implement each pipe connection?(create sub decisions for each connection)" phase="Architecture" rid="pd13" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to seperate human-computer interaction from core functionality?" phase="Architecture" rid="pd16" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to implement change-propagation mechanism?" phase="Architecture" rid="pd17" status="Unresolved" type="SingleChoice"><description>Follow Publisher-Subscriber patter</description><refChildPattern>p17</refChildPattern></DR:patternDecision><DR:patternDecision name="How to design and implement the views?" phase="Architecture" rid="pd18" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to design and implement the controllers?" phase="Architecture" rid="pd19" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to implement the view-controller relationship?" phase="Architecture" rid="pd20" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p19</refChildPattern></DR:patternDecision><DR:patternDecision name="How to implement the set-up of MVC?" phase="Architecture" rid="pd21" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to create view dynamically" phase="Architecture" rid="pd22" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p14</refChildPattern></DR:patternDecision><DR:patternDecision name="Pluggable controllers" phase="Architecture" rid="pd23" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the infrastructure for hierarchical views and controllers?" phase="Architecture" rid="pd24" status="Unresolved" type="SingleChoice"><description/><refChildPattern>p21</refChildPattern><refChildPattern>p24</refChildPattern></DR:patternDecision><DR:patternDecision name="What is the model of the application?" phase="Architecture" rid="pd25" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the general strategy for organizing the PAC hierarchy?" phase="Architecture" rid="pd26" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the top-level PAC agent?" phase="Architecture" rid="pd27" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the bottom-level PAC agents?" phase="Architecture" rid="pd28" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the bottom-level PAC agents for system services?" phase="Architecture" rid="pd29" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the intermediate-level PAC agents to compose lower-level PAC agents?" phase="Architecture" rid="pd30" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="What is the intermediate-level PAC agents to coordinate lower-level PAC agents?" phase="Architecture" rid="pd31" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternDecision name="How to seperate core functionality from human-computer interaction?" phase="Architecture" rid="pd32" status="Unresolved" type="SingleChoice"><description/></DR:patternDecision><DR:patternparticipant max="-1" min="-1" name="AbstractFactory" pid="p19" rid="pp1"/><DR:patternparticipant max="-1" min="-1" name="ConcreteFactory" pid="p19" rid="pp2"><assocParticipant rid="pp1" type="3"/><assocParticipant rid="pp5" type="1"/></DR:patternparticipant><DR:patternparticipant max="-1" min="-1" name="Client" pid="p19" rid="pp3"><assocParticipant rid="pp1" type="2"/></DR:patternparticipant><DR:patternparticipant max="-1" min="-1" name="AbstractProduct" pid="p19" rid="pp4"/><DR:patternparticipant max="-1" min="-1" name="ConcreteProduct" pid="p19" rid="pp5"><assocParticipant rid="pp4" type="3"/></DR:patternparticipant><DR:patternparticipant max="-1" min="-1" name="Proxy" pid="p12" rid="pp6"><assocParticipant rid="pp7" type="1"/><assocParticipant rid="pp8" type="3"/></DR:patternparticipant><DR:patternparticipant max="-1" min="-1" name="RealSubject" pid="p12" rid="pp7"><assocParticipant rid="pp8" type="3"/></DR:patternparticipant><DR:patternparticipant max="-1" min="-1" name="Subject" pid="p12" rid="pp8"/><DR:patternparticipant max="-1" min="-1" name="Client" pid="p12" rid="pp9"><assocParticipant rid="pp6" type="1"/><assocParticipant rid="pp8" type="2"/></DR:patternparticipant><DR:participantoperation name="CreateProduct" partOf="pp1" referencedID="pp4" referencedType="-1" rid="po1"/><DR:participantoperation name="Request" partOf="pp8" referencedID="pp-1" referencedType="-1" rid="po2"/></DR:patternLibrary><DR:tacticLibrary><DR:tactic name="Ping" rid="t1"><description>Monitor issues ping and expects to receive an echo from monitored components within a specified interval.</description><refOntPos>r152</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Ping" rid="tp14"><description>Use the upper layer as a monitor to send requests the lower layer. The lower layer's reponse to the requests can be used as echo.</description><tactic>t1</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Ping" rid="tp1"><description>Add a central monitoring process out of pattern, add periodic communication with monitor on each filter. (2 comp. + 1 conn. = 3 changes)</description><tactic>t1</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>3</modifications><overall>9</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Ping" rid="tp42"><description>Use the broker.</description><tactic>t1</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Ping" rid="tp14"><description>Use the upper layer as a monitor to send requests the lower layer. The lower layer's reponse to the requests can be used as echo.</description><tactic>t1</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Ping" rid="tp1"><description>Add a central monitoring process out of pattern, add periodic communication with monitor on each filter. (2 comp. + 1 conn. = 3 changes)</description><tactic>t1</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>3</modifications><overall>9</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Ping" rid="tp42"><description>Use the broker.</description><tactic>t1</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Passive Redundancy" rid="t3"><description>The primary component responds to requests and send the responses to all backup components. In the event of a fault, the backup component should have a state fresh enough before resuming. </description><refOntPos>r142</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Passive Redundancy" rid="tp19"><description>Add a higher layer to send requests to redundant components. The higher layer is responsible for pushing updates.</description><tactic>t3</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Passive Redundancy" rid="tp5"><description>Replicate filters. But also need to change the backup filters' input.</description><tactic>t3</tactic><pattern>p3</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>1</modifications><overall>5</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Passive Redundancy" rid="tp47"><description>Replicate server, broker, bridge, and server proxy. Modify the backup to receive state updates from the primary, and primary to send updates to backups.</description><tactic>t3</tactic><pattern>p6</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>4</modifications><overall>6</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Passive Redundancy" rid="tp19"><description>Add a higher layer to send requests to redundant components. The higher layer is responsible for pushing updates.</description><tactic>t3</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Passive Redundancy" rid="tp5"><description>Replicate filters. But also need to change the backup filters' input.</description><tactic>t3</tactic><pattern>p3</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>1</modifications><overall>5</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Passive Redundancy" rid="tp47"><description>Replicate server, broker, bridge, and server proxy. Modify the backup to receive state updates from the primary, and primary to send updates to backups.</description><tactic>t3</tactic><pattern>p6</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>4</modifications><overall>6</overall></DR:tacticpattern><DR:tactic name="Spare" rid="t4"><description>A standby platform is ready to replace many different failed components. In the event of a fault, the platform must be set to the correct configuration and state before it may operate.</description><refOntPos>r142</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Spare" rid="tp20"><description>Spare device needs to be able to replace components in different layers. Higher layer components should detect when some lower layer components fails, and configure the spare to replace it.</description><tactic>t4</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>4</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Spare" rid="tp6"><description>Add a new filter that detects when a filter isn't responding, and set up the spare to replace it.</description><tactic>t4</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Spare" rid="tp48"><description>Use the broker to decide which one needs to be replaced.</description><tactic>t4</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Spare" rid="tp20"><description>Spare device needs to be able to replace components in different layers. Higher layer components should detect when some lower layer components fails, and configure the spare to replace it.</description><tactic>t4</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>4</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Spare" rid="tp6"><description>Add a new filter that detects when a filter isn't responding, and set up the spare to replace it.</description><tactic>t4</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Spare" rid="tp48"><description>Use the broker to decide which one needs to be replaced.</description><tactic>t4</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Voting" rid="t5"><description>Multiple processes running on different processors compute the same input. A voter receives outputs from all available processors. The voter decides which of the processors have the correct answer, and which of those are faulty.</description><refOntPos>r142</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Voting" rid="tp17"><description>Add a higher layer as a voter to computations done by lower layer components.</description><tactic>t5</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Voting" rid="tp7"><description>(source)-=(different filters to compute)-(voter)-(sink) (Add voter, add different filters to compute, modify the input pipe)</description><tactic>t5</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Voting" rid="tp45"><description>Broker sends request to multiple servers, and receives multiple responses. It chooses which one is accepted, and which of the servers should be dropped.</description><tactic>t5</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Voting" rid="tp17"><description>Add a higher layer as a voter to computations done by lower layer components.</description><tactic>t5</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Voting" rid="tp7"><description>(source)-=(different filters to compute)-(voter)-(sink) (Add voter, add different filters to compute, modify the input pipe)</description><tactic>t5</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Voting" rid="tp45"><description>Broker sends request to multiple servers, and receives multiple responses. It chooses which one is accepted, and which of the servers should be dropped.</description><tactic>t5</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Shadow operation" rid="t6"><description>Previously failed components mimics the behavior of the working components before restoring it to service.</description><refOntPos>r147</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Shadow operation" rid="tp21"><description>Set up a higher layer to transmit state information of the active component to the recovering duplicate. Adjust lower layers to receive this information.</description><tactic>t6</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Shadow operation" rid="tp8"><description>Shadowing filter checks against the active filter. Change the pipe to support (-=).</description><tactic>t6</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>4</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Shadow operation" rid="tp49"><description>Modify the broker to propgate the responses to the recovering component, and modify the recovering component to mimic behaviors.</description><tactic>t6</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>2</modifications><overall>6</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Shadow operation" rid="tp21"><description>Set up a higher layer to transmit state information of the active component to the recovering duplicate. Adjust lower layers to receive this information.</description><tactic>t6</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Shadow operation" rid="tp8"><description>Shadowing filter checks against the active filter. Change the pipe to support (-=).</description><tactic>t6</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>4</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Shadow operation" rid="tp49"><description>Modify the broker to propgate the responses to the recovering component, and modify the recovering component to mimic behaviors.</description><tactic>t6</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>2</modifications><overall>6</overall></DR:tacticpattern><DR:tactic name="State resynchronization" rid="t7"><description>Update the state of the recovering component before returning it to service. </description><refOntPos>r147</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tacticpattern name="Layers,State resynchronization" rid="tp22"><description>If this is done on the top layer, create a higher layer to keep track of the correct state. Otherwise, use the existing higher layer to keep track of the correct state. This can be done inside messages sent to the lower layers.</description><tactic>t7</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Implemented In</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,State resynchronization" rid="tp9"><description>Add monitoring process to restore filters, make filters respond to restore, define proper states for each filter, communicate states from filter to the monitor.</description><tactic>t7</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>4</modifications><overall>9</overall></DR:tacticpattern><DR:tacticpattern name="Broker,State resynchronization" rid="tp50"><description>Modify the broker so that the sync groups are connected through it. All servers transmit their states to the broker.</description><tactic>t7</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>1</modifications><overall>5</overall></DR:tacticpattern><DR:tacticpattern name="Layers,State resynchronization" rid="tp22"><description>If this is done on the top layer, create a higher layer to keep track of the correct state. Otherwise, use the existing higher layer to keep track of the correct state. This can be done inside messages sent to the lower layers.</description><tactic>t7</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Implemented In</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,State resynchronization" rid="tp9"><description>Add monitoring process to restore filters, make filters respond to restore, define proper states for each filter, communicate states from filter to the monitor.</description><tactic>t7</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>4</modifications><overall>9</overall></DR:tacticpattern><DR:tacticpattern name="Broker,State resynchronization" rid="tp50"><description>Modify the broker so that the sync groups are connected through it. All servers transmit their states to the broker.</description><tactic>t7</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>1</modifications><overall>5</overall></DR:tacticpattern><DR:tactic name="Checkpoint/rollback" rid="t8"><description>Checkpoints and log files are created during normal operations. In the event of a fault, the system is restored to a previous checkpoint and log files.</description><refOntPos>r147</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Checkpoint/rollback" rid="tp23"><description>The higher layer is responsible for making checkpoints and rolls back to the correct state.</description><tactic>t8</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Checkpoint/rollback" rid="tp10"><description>Undo changes requires previous filter respond to its next filter. Add monitor and a protocol to ensure atomic rollback. Add communication between monitor and filters.</description><tactic>t8</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>4</modifications><overall>9</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Checkpoint/rollback" rid="tp51"><description>Modify both the broker and the servers to make checkpoints and recover from them.</description><tactic>t8</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>2</modifications><overall>6</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Checkpoint/rollback" rid="tp23"><description>The higher layer is responsible for making checkpoints and rolls back to the correct state.</description><tactic>t8</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Checkpoint/rollback" rid="tp10"><description>Undo changes requires previous filter respond to its next filter. Add monitor and a protocol to ensure atomic rollback. Add communication between monitor and filters.</description><tactic>t8</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>4</modifications><overall>9</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Checkpoint/rollback" rid="tp51"><description>Modify both the broker and the servers to make checkpoints and recover from them.</description><tactic>t8</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>2</modifications><overall>6</overall></DR:tacticpattern><DR:tactic name="Active Redundancy" rid="t9"><description>Redundant components replicates the behavior of the primary. In the event a fault occurs on the primary, the faillover usually finishes in milliseconds.</description><refOntPos>r142</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Active Redundancy" rid="tp18"><description>Replicate individual components, and change the top layer to accept one of the answers it receives from redundant lower layer components.</description><tactic>t9</tactic><pattern>p2</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Active Redundancy" rid="tp4"><description>Replicate Filters, and send input to the redundant filters. Minor changes needed to the pipes.</description><tactic>t9</tactic><pattern>p3</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Active Redundancy" rid="tp46"><description>Replicates server, broker, server proxy, and bridge.</description><tactic>t9</tactic><pattern>p6</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>4</modifications><overall>4</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Active Redundancy" rid="tp18"><description>Replicate individual components, and change the top layer to accept one of the answers it receives from redundant lower layer components.</description><tactic>t9</tactic><pattern>p2</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Active Redundancy" rid="tp4"><description>Replicate Filters, and send input to the redundant filters. Minor changes needed to the pipes.</description><tactic>t9</tactic><pattern>p3</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Active Redundancy" rid="tp46"><description>Replicates server, broker, server proxy, and bridge.</description><tactic>t9</tactic><pattern>p6</pattern><structure>Replicates</structure><behavior>Replicates</behavior><modifications>4</modifications><overall>4</overall></DR:tacticpattern><DR:tactic name="Heartbeat (dead man timer)" rid="t10"><description>Monitored component issues heartbeat message to the monitor. If the monitor fails to receive it in a specified interval, then it assumes the component to be dead.</description><refOntPos>r152</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Heartbeat (dead man timer)" rid="tp15"><description>Lower layer services needs to send responses to the upper layer periodically. This has to be done outside the abstraction levels provided by the pattern.</description><tactic>t10</tactic><pattern>p2</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Heartbeat (dead man timer)" rid="tp2"><description>Add periodic msg sending behavior to each filter to monitor. Add monitor. (2 comp. + 1 conn.)</description><tactic>t10</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Heartbeat (dead man timer)" rid="tp43"><description>Servers sends "heartbeats" to their broker.</description><tactic>t10</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Heartbeat (dead man timer)" rid="tp15"><description>Lower layer services needs to send responses to the upper layer periodically. This has to be done outside the abstraction levels provided by the pattern.</description><tactic>t10</tactic><pattern>p2</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Heartbeat (dead man timer)" rid="tp2"><description>Add periodic msg sending behavior to each filter to monitor. Add monitor. (2 comp. + 1 conn.)</description><tactic>t10</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Heartbeat (dead man timer)" rid="tp43"><description>Servers sends "heartbeats" to their broker.</description><tactic>t10</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Exceptions" rid="t11"><description>Exception is raised when a fault is detected. The exception handler executes the exception. An exception may occur at one component and require other components to handle it.</description><refOntPos>r152</refOntPos><behavior>Change existing timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Exceptions" rid="tp16"><description>Exceptions can be handled by a higher layer if they cannot be handled by lower layers.</description><tactic>t11</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Exceptions" rid="tp3"><description>Add a central process to delegate exceptions to responsible filter from where the problem occured (may be outside the filter!). Add connector.</description><tactic>t11</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Exceptions" rid="tp44"><description>Broker handles exceptions from the servers.</description><tactic>t11</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Exceptions" rid="tp16"><description>Exceptions can be handled by a higher layer if they cannot be handled by lower layers.</description><tactic>t11</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Exceptions" rid="tp3"><description>Add a central process to delegate exceptions to responsible filter from where the problem occured (may be outside the filter!). Add connector.</description><tactic>t11</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Exceptions" rid="tp44"><description>Broker handles exceptions from the servers.</description><tactic>t11</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Maintain semantic coherence" rid="t12"><description>Ensure all responsibilities work toghether without excessive reliance on other modules.</description><refOntPos>r66</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Anticipate changes" rid="t13"><description>Anticipate the expected changes to minimize difficulty of implementing the changes at a later date.</description><refOntPos>r66</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Generalize the module" rid="t14"><description>Allows a module to accept varients of inputs and provide broader range of functions.</description><refOntPos>r66</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Limit possible options" rid="t15"><description>Limiting the possible options may reduce the effects of modifications that spread over many modules.</description><refOntPos>r66</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Hide Information" rid="t16"><description>Chooses which information should be public and which should be private.</description><refOntPos>r67</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Maintain existing interfaces" rid="t17"><description>Maintaining interface allows dependent modules to remain unchanged.</description><refOntPos>r67</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Restrict communication paths" rid="t18"><description>Given a module, restrict number of other modules it shares data with.</description><refOntPos>r67</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Use an intermediary" rid="t19"><description/><refOntPos>r67</refOntPos><behavior>undefined</behavior></DR:tactic><DR:tactic name="Authenicate Users" rid="t20"><description>Ensures the client is who it claimed to be.</description><refOntPos>r128</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Authenicate Users" rid="tp27"><description>Add an authenication layer as a higher layer.</description><tactic>t20</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Authenicate Users" rid="tp35"><description>Add a new filter for authenication.</description><tactic>t20</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Authenicate Users" rid="tp55"><description>Use broker.</description><tactic>t20</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Authenicate Users" rid="tp27"><description>Add an authenication layer as a higher layer.</description><tactic>t20</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Authenicate Users" rid="tp35"><description>Add a new filter for authenication.</description><tactic>t20</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Authenicate Users" rid="tp55"><description>Use broker.</description><tactic>t20</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Authorize Users" rid="t21"><description>Ensuring an authenicated client has the right to perform an operation.</description><refOntPos>r128</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Authorize Users" rid="tp28"><description>Add an authorization layer just below authenication.</description><tactic>t21</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add out of pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Authorize Users" rid="tp36"><description>Add a new filter after the authenication filter to provide authorization.</description><tactic>t21</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Authorize Users" rid="tp56"><description>Use broker</description><tactic>t21</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Authorize Users" rid="tp28"><description>Add an authorization layer just below authenication.</description><tactic>t21</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add out of pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Authorize Users" rid="tp36"><description>Add a new filter after the authenication filter to provide authorization.</description><tactic>t21</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Authorize Users" rid="tp56"><description>Use broker</description><tactic>t21</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Maintain data confidentiality" rid="t22"><description>Protect data from unauthorized access by controlling the information or links transmitting the information. (e.g.: Encryption of data or comm layers, using shielded cables...)</description><refOntPos>r128</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Maintain data confidentiality" rid="tp29"><description>Add a new cipher (encrypt/decrypt) layer just above the transmission.</description><tactic>t22</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Maintain data confidentiality" rid="tp37"><description>Add a new cipher filter.</description><tactic>t22</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Maintain data confidentiality" rid="tp58"><description>Modify the client, broker, and the server to be able to operate on encrypted data.</description><tactic>t22</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Modify</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Maintain data confidentiality" rid="tp29"><description>Add a new cipher (encrypt/decrypt) layer just above the transmission.</description><tactic>t22</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Maintain data confidentiality" rid="tp37"><description>Add a new cipher filter.</description><tactic>t22</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Maintain data confidentiality" rid="tp58"><description>Modify the client, broker, and the server to be able to operate on encrypted data.</description><tactic>t22</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Modify</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tactic name="Maintain integrity" rid="t23"><description>Ensures data delievered is equivalent to the original by adding redundant information.</description><refOntPos>r128</refOntPos><behavior>Change existing timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Maintain integrity" rid="tp30"><description>Add a layer to pack the data with redundant information before transmitting it.</description><tactic>t23</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Maintain integrity" rid="tp38"><description>Add a new filter to enter redundant data into the sink.</description><tactic>t23</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Maintain integrity" rid="tp59"><description>Modify the client, broker, and the server to add redundant information and understand what they should do with them.</description><tactic>t23</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Maintain integrity" rid="tp30"><description>Add a layer to pack the data with redundant information before transmitting it.</description><tactic>t23</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Maintain integrity" rid="tp38"><description>Add a new filter to enter redundant data into the sink.</description><tactic>t23</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Maintain integrity" rid="tp59"><description>Modify the client, broker, and the server to add redundant information and understand what they should do with them.</description><tactic>t23</tactic><pattern>p6</pattern><structure>Modify</structure><behavior>Modify</behavior><modifications>3</modifications><overall>8</overall></DR:tacticpattern><DR:tactic name="Limit Exposure of Services" rid="t24"><description>Prevents intruder from gaining access to additional services.</description><refOntPos>r128</refOntPos><behavior>Change existing timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Limit Exposure of Services" rid="tp31"><description>Higher layer components always have all services provided by lower layer components. First split the higher layer, then use a pipe to redirect input to the correct higher-layer component.</description><tactic>t24</tactic><pattern>p2</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Limit Exposure of Services" rid="tp31"><description>Higher layer components always have all services provided by lower layer components. First split the higher layer, then use a pipe to redirect input to the correct higher-layer component.</description><tactic>t24</tactic><pattern>p2</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tactic name="Limit Access" rid="t25"><description>Restricts kinds of messages a service may receive or respond.</description><refOntPos>r128</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Limit Access" rid="tp32"><description>Use the interfacing layer to check the request. Refuses to respond if it is not acceptable.</description><tactic>t25</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Limit Access" rid="tp39"><description>Use the existing filter to check whether the message is acceptable. Since filters already checks for syntax of the message, the sequence can be added there.</description><tactic>t25</tactic><pattern>p3</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Limit Access" rid="tp57"><description>Use broker.</description><tactic>t25</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Limit Access" rid="tp32"><description>Use the interfacing layer to check the request. Refuses to respond if it is not acceptable.</description><tactic>t25</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Limit Access" rid="tp39"><description>Use the existing filter to check whether the message is acceptable. Since filters already checks for syntax of the message, the sequence can be added there.</description><tactic>t25</tactic><pattern>p3</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Limit Access" rid="tp57"><description>Use broker.</description><tactic>t25</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Intrusion detection" rid="t26"><description>Analyze the historical traffic and access patterns, and compare the current traffic and access against the historical to detect usual behaviors.</description><refOntPos>r127</refOntPos><behavior>Change existing timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Intrusion detection" rid="tp33"><description>Add a logging layer to monitor history and analzye the current traffic. Depending on what kinds of information to log, the monitor might need to be set up on multiple layers.</description><tactic>t26</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Intrusion detection" rid="tp40"><description>Requires adding a monitor and logging behavior. The existing filters must also communicate with the monitor.</description><tactic>t26</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Intrusion detection" rid="tp60"><description>Use the server-side proxies to monitor, record, and compare traffic.</description><tactic>t26</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Intrusion detection" rid="tp33"><description>Add a logging layer to monitor history and analzye the current traffic. Depending on what kinds of information to log, the monitor might need to be set up on multiple layers.</description><tactic>t26</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Intrusion detection" rid="tp40"><description>Requires adding a monitor and logging behavior. The existing filters must also communicate with the monitor.</description><tactic>t26</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Intrusion detection" rid="tp60"><description>Use the server-side proxies to monitor, record, and compare traffic.</description><tactic>t26</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Maintain Audit Trail" rid="t27"><description>Supports system recovery, nonrepudiation, and tracing by maintaining accountability of accounts, and logs of transactions for each accounts.</description><refOntPos>r129</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Maintain Audit Trail" rid="tp34"><description>Add a layer on top of authenication to log what had been done under different accounts.</description><tactic>t27</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Maintain Audit Trail" rid="tp41"><description>Add a new filter to log.</description><tactic>t27</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Maintain Audit Trail" rid="tp61"><description>Use the broker to maintain a log.</description><tactic>t27</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Maintain Audit Trail" rid="tp34"><description>Add a layer on top of authenication to log what had been done under different accounts.</description><tactic>t27</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Maintain Audit Trail" rid="tp41"><description>Add a new filter to log.</description><tactic>t27</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>1</modifications><overall>2</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Maintain Audit Trail" rid="tp61"><description>Use the broker to maintain a log.</description><tactic>t27</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Record/Playback" rid="t28"><description>An interface captures input and output and saves them. It is used later by test harness as input and expected output.</description><refOntPos>r285</refOntPos><behavior>Change existing timing</behavior></DR:tactic><DR:tactic name="Seperate Interface from Implementation" rid="t29"><description>Seperating the interface provides gap for implenting test stubs.</description><refOntPos>r283</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tactic name="Specialize Access Routes/Interfaces" rid="t30"><description/><refOntPos>r285</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tactic name="Built-in monitors" rid="t31"><description>Use built-in monitors to view or log its state, load, capacity, and other information necessary to evaluate against requirements.</description><refOntPos>r281</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tactic name="Removal from Service" rid="t32"><description>Removes a component to prevent failures.</description><refOntPos>r153</refOntPos><behavior>Change existing timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Removal from Service" rid="tp24"><description>Add a monitor to the higher layer to decide when to remove a lower layer from service. When removing, either simply stop sending messages to it by deleting the reference, or terminate the components gracefully.</description><tactic>t32</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Removal from Service" rid="tp11"><description>Adding a monitor, and connections from them to filters.</description><tactic>t32</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Removal from Service" rid="tp52"><description>Removal of servers can be done in the broker. </description><tactic>t32</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Removal from Service" rid="tp24"><description>Add a monitor to the higher layer to decide when to remove a lower layer from service. When removing, either simply stop sending messages to it by deleting the reference, or terminate the components gracefully.</description><tactic>t32</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Removal from Service" rid="tp11"><description>Adding a monitor, and connections from them to filters.</description><tactic>t32</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Removal from Service" rid="tp52"><description>Removal of servers can be done in the broker. </description><tactic>t32</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Transactions" rid="t33"><description>Bundle modifications to ensure either all changes in it were made, or none of them.</description><refOntPos>r153</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Transactions" rid="tp25"><description>Add a layer to pack data into a transaction, modify lower-layer services to work on them.</description><tactic>t33</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Transactions" rid="tp13"><description>Add a filter and a pipe to package and transmit transaction data, modify later filters to operate on the transaction data. </description><tactic>t33</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>5</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Transactions" rid="tp53"><description>Broker packs client's request into transactions. Add transaction commit protocol to both the broker and the server.</description><tactic>t33</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Transactions" rid="tp25"><description>Add a layer to pack data into a transaction, modify lower-layer services to work on them.</description><tactic>t33</tactic><pattern>p2</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>3</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Transactions" rid="tp13"><description>Add a filter and a pipe to package and transmit transaction data, modify later filters to operate on the transaction data. </description><tactic>t33</tactic><pattern>p3</pattern><structure>Add in pattern</structure><behavior>Add in pattern</behavior><modifications>2</modifications><overall>5</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Transactions" rid="tp53"><description>Broker packs client's request into transactions. Add transaction commit protocol to both the broker and the server.</description><tactic>t33</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tactic name="Process Monitor" rid="t34"><description>Monitor checks whether processes have faults. If so, it corrects them to appropriate states.</description><refOntPos>r153</refOntPos><behavior>Add new timing</behavior></DR:tactic><DR:tacticpattern name="Layers,Process Monitor" rid="tp26"><description>Higher layer component should have access to all lower-layer delegates. Add process monitor in the higher layer.</description><tactic>t34</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Process Monitor" rid="tp12"><description>Add monitor, and connection to filters in order to recover them to a correct state.</description><tactic>t34</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Process Monitor" rid="tp54"><description>Done in broker.</description><tactic>t34</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Layers,Process Monitor" rid="tp26"><description>Higher layer component should have access to all lower-layer delegates. Add process monitor in the higher layer.</description><tactic>t34</tactic><pattern>p2</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern><DR:tacticpattern name="Pipes and Filters,Process Monitor" rid="tp12"><description>Add monitor, and connection to filters in order to recover them to a correct state.</description><tactic>t34</tactic><pattern>p3</pattern><structure>Add out of pattern</structure><behavior>Add out of pattern</behavior><modifications>2</modifications><overall>7</overall></DR:tacticpattern><DR:tacticpattern name="Broker,Process Monitor" rid="tp54"><description>Done in broker.</description><tactic>t34</tactic><pattern>p6</pattern><structure>Implemented In</structure><behavior>Implemented In</behavior><modifications>1</modifications><overall>1</overall></DR:tacticpattern></DR:tacticLibrary></DR:rationale>